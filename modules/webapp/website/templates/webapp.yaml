apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: site-ingress
  namespace: {{ .Values.namespace.name }}
  annotations:  
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.org/client-max-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: {{ .Values.issuer.name }}
spec:
  tls:
  - hosts:
    - {{ .Values.app.hostname }}
    secretName: site-secret-tls
  rules:
  - host: {{ .Values.app.hostname }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ .Values.app.name }}
          servicePort: 80
---         
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    app: {{ .Values.app.name }}
    tier: web
spec:
  ports:
    - port: 80
  selector:
    app: {{ .Values.app.name }}
    tier: web
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    app: {{ .Values.app.name }}
    tier: web
spec:
  replicas: 1
  selector:
    matchLabels:
        app: {{ .Values.app.name }}
        tier: web
  strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 1
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        tier: web
    spec:
      initContainers:
      - name: init-myservice
        image: busybox:1.28
        command: ['sh', '-c', "until nc -zv mysql 3306; do echo waiting for myservice; sleep 2; done"]
      containers:  
      - image: wordpress
        name: wordpress
        readinessProbe:
          httpGet:
            path: /
            port: 80
            httpHeaders:
            - name: Host
              value: {{ .Values.app.hostname }}
          initialDelaySeconds: 15
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
          periodSeconds: 15
        env:
        - name: WORDPRESS_DB_NAME
          value: "demosite"     
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: http
